<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.portal.projt, service, jdbcUtil" />
	
	<!-- JsonView -->
<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
   <beans:property name="order" value="1"></beans:property>
</beans:bean>
	<!-- multipartResolver -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1" />
	</beans:bean>
	
	<!-- 데이터베이스 연결 --> 
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
	<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> 
	<beans:property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:orcl" /> 
	<beans:property name="username" value="system"/> 
	<beans:property name="password" value="Oracle"/> 
	</beans:bean> 
	
<!--  SqlSessionFactory 객체 설정 
	- MyBatis 와 연동시 핵심 클래스
	- DB 연결과 SQL 실행의 핵심 클래스
	- SqlSessionFactoryBean 에 의해 생성됨
	- root-context.xml 에 추가 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		
	  	<!-- MyBatis 설정 파일의 위치를 지정  : 스프링 동작시 같이 동작 하도록 --> 
	  	<beans:property name="configLocation" value="classpath:/mybatis-config.xml" /> 
	  	<!--스프링을 사용해서 mybatis를 이용한다면 없어도 되는 설정--> 
	  	<!-- SQL을 작성해놓은 xml 파일(mapper)의 위치를 지정합니다. --> 
	  	<beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml" /> 
	  	 <!-- mappers 폴더내의 모든 폴더의 *Mapper.xml 을 인식하도록 해줌 -->
	</beans:bean> 
	
	<!-- SqlSessionTemplate DB연결 & Close -->
	<!-- sqlSessionFactory 를 생성자로 주입해서 설정 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
	 	<beans:constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</beans:bean> 
<!--스프링시큐리티 라이브러리 BcryptPasswordEncoder -->
<beans:bean id="bcryptPasswordEncoder" 
class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
</beans:beans>
